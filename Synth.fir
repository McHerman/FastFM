circuit Synth :
  module DSP :
    input clock : Clock
    input reset : Reset
    output io : { flip Input1 : UInt<18>, flip Input2 : UInt<18>, Out : UInt<36>}

    node _io_Out_T = mul(io.Input1, io.Input2) @[DSP.scala 11:23]
    io.Out <= _io_Out_T @[DSP.scala 11:10]

  module SineGenerator :
    input clock : Clock
    input reset : Reset
    output io : { WaveOut : SInt<20>, flip Amp : UInt<18>, flip Index : UInt<20>, OutputValid : UInt<1>}

    inst DSP of DSP @[SineGenerator.scala 12:19]
    DSP.clock <= clock
    DSP.reset <= reset
    reg OpCounter : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SineGenerator.scala 14:26]
    node _OpCounter_T = add(OpCounter, UInt<1>("h1")) @[SineGenerator.scala 16:26]
    node _OpCounter_T_1 = tail(_OpCounter_T, 1) @[SineGenerator.scala 16:26]
    OpCounter <= _OpCounter_T_1 @[SineGenerator.scala 16:13]
    node _T = eq(OpCounter, UInt<1>("h1")) @[SineGenerator.scala 18:18]
    when _T : @[SineGenerator.scala 18:26]
      OpCounter <= UInt<1>("h0") @[SineGenerator.scala 19:15]
    reg WaveReg : UInt<18>, clock with :
      reset => (reset, UInt<18>("h0")) @[SineGenerator.scala 22:24]
    reg WaveReg2 : SInt<20>, clock with :
      reset => (reset, asSInt(UInt<20>("h0"))) @[SineGenerator.scala 23:25]
    wire IndexAr : UInt<18> @[SineGenerator.scala 24:21]
    io.WaveOut <= WaveReg2 @[SineGenerator.scala 26:14]
    wire DSPOut : UInt<36> @[SineGenerator.scala 28:20]
    DSPOut <= DSP.io.Out @[SineGenerator.scala 30:10]
    node _T_1 = bits(io.Index, 18, 18) @[SineGenerator.scala 32:16]
    node _T_2 = bits(_T_1, 0, 0) @[SineGenerator.scala 32:21]
    when _T_2 : @[SineGenerator.scala 32:28]
      node _IndexAr_T = bits(io.Index, 17, 0) @[SineGenerator.scala 33:24]
      IndexAr <= _IndexAr_T @[SineGenerator.scala 33:13]
    else :
      node _IndexAr_T_1 = bits(io.Index, 17, 0) @[SineGenerator.scala 35:37]
      node _IndexAr_T_2 = sub(UInt<18>("h3ffff"), _IndexAr_T_1) @[SineGenerator.scala 35:27]
      node _IndexAr_T_3 = tail(_IndexAr_T_2, 1) @[SineGenerator.scala 35:27]
      IndexAr <= _IndexAr_T_3 @[SineGenerator.scala 35:13]
    node _DSP_io_Input1_T = bits(OpCounter, 0, 0) @[SineGenerator.scala 38:34]
    node _DSP_io_Input1_T_1 = mux(_DSP_io_Input1_T, WaveReg, IndexAr) @[SineGenerator.scala 38:23]
    DSP.io.Input1 <= _DSP_io_Input1_T_1 @[SineGenerator.scala 38:17]
    node _DSP_io_Input2_T = bits(OpCounter, 0, 0) @[SineGenerator.scala 39:34]
    node _DSP_io_Input2_T_1 = mux(_DSP_io_Input2_T, io.Amp, IndexAr) @[SineGenerator.scala 39:23]
    DSP.io.Input2 <= _DSP_io_Input2_T_1 @[SineGenerator.scala 39:17]
    node _T_3 = bits(OpCounter, 0, 0) @[SineGenerator.scala 41:18]
    when _T_3 : @[SineGenerator.scala 41:25]
      node _T_4 = bits(io.Index, 19, 19) @[SineGenerator.scala 42:18]
      node _T_5 = bits(_T_4, 0, 0) @[SineGenerator.scala 42:23]
      when _T_5 : @[SineGenerator.scala 42:30]
        node _io_WaveOut_T = bits(DSPOut, 35, 17) @[SineGenerator.scala 43:28]
        node _io_WaveOut_T_1 = cvt(_io_WaveOut_T) @[SineGenerator.scala 43:36]
        node _io_WaveOut_T_2 = sub(asSInt(UInt<1>("h0")), _io_WaveOut_T_1) @[SineGenerator.scala 43:21]
        node _io_WaveOut_T_3 = tail(_io_WaveOut_T_2, 1) @[SineGenerator.scala 43:21]
        node _io_WaveOut_T_4 = asSInt(_io_WaveOut_T_3) @[SineGenerator.scala 43:21]
        io.WaveOut <= _io_WaveOut_T_4 @[SineGenerator.scala 43:18]
        node _WaveReg2_T = bits(DSPOut, 35, 17) @[SineGenerator.scala 44:26]
        node _WaveReg2_T_1 = cvt(_WaveReg2_T) @[SineGenerator.scala 44:34]
        node _WaveReg2_T_2 = sub(asSInt(UInt<1>("h0")), _WaveReg2_T_1) @[SineGenerator.scala 44:19]
        node _WaveReg2_T_3 = tail(_WaveReg2_T_2, 1) @[SineGenerator.scala 44:19]
        node _WaveReg2_T_4 = asSInt(_WaveReg2_T_3) @[SineGenerator.scala 44:19]
        WaveReg2 <= _WaveReg2_T_4 @[SineGenerator.scala 44:16]
      else :
        node _io_WaveOut_T_5 = bits(DSPOut, 35, 17) @[SineGenerator.scala 46:27]
        node _io_WaveOut_T_6 = cvt(_io_WaveOut_T_5) @[SineGenerator.scala 46:35]
        io.WaveOut <= _io_WaveOut_T_6 @[SineGenerator.scala 46:18]
        node _WaveReg2_T_5 = bits(DSPOut, 35, 17) @[SineGenerator.scala 47:25]
        node _WaveReg2_T_6 = cvt(_WaveReg2_T_5) @[SineGenerator.scala 47:33]
        WaveReg2 <= _WaveReg2_T_6 @[SineGenerator.scala 47:16]
      io.OutputValid <= UInt<1>("h1") @[SineGenerator.scala 50:20]
    else :
      node _WaveReg_T = bits(DSPOut, 35, 18) @[SineGenerator.scala 52:33]
      node _WaveReg_T_1 = sub(UInt<18>("h3ffff"), _WaveReg_T) @[SineGenerator.scala 52:25]
      node _WaveReg_T_2 = tail(_WaveReg_T_1, 1) @[SineGenerator.scala 52:25]
      WaveReg <= _WaveReg_T_2 @[SineGenerator.scala 52:13]
      io.OutputValid <= UInt<1>("h0") @[SineGenerator.scala 54:20]

  module IntructionMemory :
    input clock : Clock
    input reset : Reset
    output io : { flip Algorithm : UInt<5>, flip Step : UInt<3>, ReadReg : UInt<6>, WriteReg : UInt<3>, IsOutput : UInt<1>}

    wire Mem1 : UInt<10>[6] @[IntructionMemory.scala 24:21]
    Mem1[0] <= UInt<9>("h180") @[IntructionMemory.scala 24:21]
    Mem1[1] <= UInt<9>("h160") @[IntructionMemory.scala 24:21]
    Mem1[2] <= UInt<9>("h110") @[IntructionMemory.scala 24:21]
    Mem1[3] <= UInt<10>("h2c8") @[IntructionMemory.scala 24:21]
    Mem1[4] <= UInt<8>("h82") @[IntructionMemory.scala 24:21]
    Mem1[5] <= UInt<10>("h242") @[IntructionMemory.scala 24:21]
    wire Data : UInt<10> @[IntructionMemory.scala 26:18]
    Data <= UInt<1>("h0") @[IntructionMemory.scala 27:8]
    wire Address : UInt<8> @[IntructionMemory.scala 29:21]
    node _Address_T = shl(io.Algorithm, 3) @[IntructionMemory.scala 30:28]
    node _Address_T_1 = add(_Address_T, io.Step) @[IntructionMemory.scala 30:41]
    node _Address_T_2 = tail(_Address_T_1, 1) @[IntructionMemory.scala 30:41]
    Address <= _Address_T_2 @[IntructionMemory.scala 30:11]
    node _Data_T = bits(Address, 2, 0)
    Data <= Mem1[_Data_T] @[IntructionMemory.scala 33:8]
    node _io_ReadReg_T = bits(Data, 5, 0) @[IntructionMemory.scala 35:21]
    io.ReadReg <= _io_ReadReg_T @[IntructionMemory.scala 35:14]
    node _io_WriteReg_T = bits(Data, 8, 6) @[IntructionMemory.scala 36:22]
    io.WriteReg <= _io_WriteReg_T @[IntructionMemory.scala 36:15]
    node _io_IsOutput_T = bits(Data, 9, 9) @[IntructionMemory.scala 37:22]
    node _io_IsOutput_T_1 = bits(_io_IsOutput_T, 0, 0) @[IntructionMemory.scala 37:26]
    io.IsOutput <= _io_IsOutput_T_1 @[IntructionMemory.scala 37:15]

  module Voice :
    input clock : Clock
    input reset : Reset
    output io : { WaveOut : SInt<23>, flip Freq : UInt<20>[6], flip Amp : UInt<20>[6], flip Algorithm : UInt<5>}

    inst SineGenerator of SineGenerator @[Voice.scala 12:29]
    SineGenerator.clock <= clock
    SineGenerator.reset <= reset
    reg WaveReg : SInt<20>[6], clock with :
      reset => (UInt<1>("h0"), WaveReg) @[Voice.scala 14:20]
    reg OpCounter : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Voice.scala 16:26]
    reg opCounter2 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Voice.scala 17:27]
    reg ScaleReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Voice.scala 18:25]
    reg FreqReg : UInt<20>[6], clock with :
      reset => (UInt<1>("h0"), FreqReg) @[Voice.scala 20:20]
    reg IndexReg : UInt<20>[6], clock with :
      reset => (UInt<1>("h0"), IndexReg) @[Voice.scala 21:21]
    reg OutputTempReg : SInt<23>, clock with :
      reset => (reset, asSInt(UInt<23>("h0"))) @[Voice.scala 23:30]
    reg OutputReg : SInt<23>, clock with :
      reset => (reset, asSInt(UInt<23>("h0"))) @[Voice.scala 25:26]
    wire IndexTemp : SInt<23> @[Voice.scala 27:23]
    node _FreqReg_0_T = add(FreqReg[0], UInt<1>("h1")) @[Voice.scala 33:30]
    node _FreqReg_0_T_1 = tail(_FreqReg_0_T, 1) @[Voice.scala 33:30]
    FreqReg[0] <= _FreqReg_0_T_1 @[Voice.scala 33:16]
    node _T = eq(FreqReg[0], io.Freq[0]) @[Voice.scala 35:21]
    when _T : @[Voice.scala 35:36]
      FreqReg[0] <= UInt<1>("h0") @[Voice.scala 36:18]
      node _IndexReg_0_T = add(IndexReg[0], UInt<1>("h1")) @[Voice.scala 37:34]
      node _IndexReg_0_T_1 = tail(_IndexReg_0_T, 1) @[Voice.scala 37:34]
      IndexReg[0] <= _IndexReg_0_T_1 @[Voice.scala 37:19]
    node _FreqReg_1_T = add(FreqReg[1], UInt<1>("h1")) @[Voice.scala 33:30]
    node _FreqReg_1_T_1 = tail(_FreqReg_1_T, 1) @[Voice.scala 33:30]
    FreqReg[1] <= _FreqReg_1_T_1 @[Voice.scala 33:16]
    node _T_1 = eq(FreqReg[1], io.Freq[1]) @[Voice.scala 35:21]
    when _T_1 : @[Voice.scala 35:36]
      FreqReg[1] <= UInt<1>("h0") @[Voice.scala 36:18]
      node _IndexReg_1_T = add(IndexReg[1], UInt<1>("h1")) @[Voice.scala 37:34]
      node _IndexReg_1_T_1 = tail(_IndexReg_1_T, 1) @[Voice.scala 37:34]
      IndexReg[1] <= _IndexReg_1_T_1 @[Voice.scala 37:19]
    node _FreqReg_2_T = add(FreqReg[2], UInt<1>("h1")) @[Voice.scala 33:30]
    node _FreqReg_2_T_1 = tail(_FreqReg_2_T, 1) @[Voice.scala 33:30]
    FreqReg[2] <= _FreqReg_2_T_1 @[Voice.scala 33:16]
    node _T_2 = eq(FreqReg[2], io.Freq[2]) @[Voice.scala 35:21]
    when _T_2 : @[Voice.scala 35:36]
      FreqReg[2] <= UInt<1>("h0") @[Voice.scala 36:18]
      node _IndexReg_2_T = add(IndexReg[2], UInt<1>("h1")) @[Voice.scala 37:34]
      node _IndexReg_2_T_1 = tail(_IndexReg_2_T, 1) @[Voice.scala 37:34]
      IndexReg[2] <= _IndexReg_2_T_1 @[Voice.scala 37:19]
    node _FreqReg_3_T = add(FreqReg[3], UInt<1>("h1")) @[Voice.scala 33:30]
    node _FreqReg_3_T_1 = tail(_FreqReg_3_T, 1) @[Voice.scala 33:30]
    FreqReg[3] <= _FreqReg_3_T_1 @[Voice.scala 33:16]
    node _T_3 = eq(FreqReg[3], io.Freq[3]) @[Voice.scala 35:21]
    when _T_3 : @[Voice.scala 35:36]
      FreqReg[3] <= UInt<1>("h0") @[Voice.scala 36:18]
      node _IndexReg_3_T = add(IndexReg[3], UInt<1>("h1")) @[Voice.scala 37:34]
      node _IndexReg_3_T_1 = tail(_IndexReg_3_T, 1) @[Voice.scala 37:34]
      IndexReg[3] <= _IndexReg_3_T_1 @[Voice.scala 37:19]
    node _FreqReg_4_T = add(FreqReg[4], UInt<1>("h1")) @[Voice.scala 33:30]
    node _FreqReg_4_T_1 = tail(_FreqReg_4_T, 1) @[Voice.scala 33:30]
    FreqReg[4] <= _FreqReg_4_T_1 @[Voice.scala 33:16]
    node _T_4 = eq(FreqReg[4], io.Freq[4]) @[Voice.scala 35:21]
    when _T_4 : @[Voice.scala 35:36]
      FreqReg[4] <= UInt<1>("h0") @[Voice.scala 36:18]
      node _IndexReg_4_T = add(IndexReg[4], UInt<1>("h1")) @[Voice.scala 37:34]
      node _IndexReg_4_T_1 = tail(_IndexReg_4_T, 1) @[Voice.scala 37:34]
      IndexReg[4] <= _IndexReg_4_T_1 @[Voice.scala 37:19]
    node _FreqReg_5_T = add(FreqReg[5], UInt<1>("h1")) @[Voice.scala 33:30]
    node _FreqReg_5_T_1 = tail(_FreqReg_5_T, 1) @[Voice.scala 33:30]
    FreqReg[5] <= _FreqReg_5_T_1 @[Voice.scala 33:16]
    node _T_5 = eq(FreqReg[5], io.Freq[5]) @[Voice.scala 35:21]
    when _T_5 : @[Voice.scala 35:36]
      FreqReg[5] <= UInt<1>("h0") @[Voice.scala 36:18]
      node _IndexReg_5_T = add(IndexReg[5], UInt<1>("h1")) @[Voice.scala 37:34]
      node _IndexReg_5_T_1 = tail(_IndexReg_5_T, 1) @[Voice.scala 37:34]
      IndexReg[5] <= _IndexReg_5_T_1 @[Voice.scala 37:19]
    node _ScaleReg_T = add(ScaleReg, UInt<1>("h1")) @[Voice.scala 43:24]
    node _ScaleReg_T_1 = tail(_ScaleReg_T, 1) @[Voice.scala 43:24]
    ScaleReg <= _ScaleReg_T_1 @[Voice.scala 43:12]
    node _T_6 = eq(ScaleReg, UInt<1>("h1")) @[Voice.scala 45:17]
    when _T_6 : @[Voice.scala 45:25]
      node _T_7 = neq(OpCounter, UInt<3>("h5")) @[Voice.scala 46:20]
      when _T_7 : @[Voice.scala 46:28]
        node _OpCounter_T = add(OpCounter, UInt<1>("h1")) @[Voice.scala 47:30]
        node _OpCounter_T_1 = tail(_OpCounter_T, 1) @[Voice.scala 47:30]
        OpCounter <= _OpCounter_T_1 @[Voice.scala 47:17]
      else :
        OpCounter <= UInt<1>("h0") @[Voice.scala 49:17]
      ScaleReg <= UInt<1>("h0") @[Voice.scala 51:14]
    inst Mem of IntructionMemory @[Voice.scala 57:19]
    Mem.clock <= clock
    Mem.reset <= reset
    Mem.io.Step <= OpCounter @[Voice.scala 59:15]
    Mem.io.Algorithm <= io.Algorithm @[Voice.scala 60:20]
    node _IndexTemp_T = bits(Mem.io.ReadReg, 0, 0) @[Voice.scala 88:34]
    node _IndexTemp_T_1 = bits(_IndexTemp_T, 0, 0) @[Voice.scala 88:38]
    node _IndexTemp_T_2 = mux(_IndexTemp_T_1, WaveReg[0], asSInt(UInt<1>("h0"))) @[Voice.scala 88:19]
    node _IndexTemp_T_3 = bits(Mem.io.ReadReg, 1, 1) @[Voice.scala 88:83]
    node _IndexTemp_T_4 = bits(_IndexTemp_T_3, 0, 0) @[Voice.scala 88:87]
    node _IndexTemp_T_5 = mux(_IndexTemp_T_4, WaveReg[1], asSInt(UInt<1>("h0"))) @[Voice.scala 88:68]
    node _IndexTemp_T_6 = add(_IndexTemp_T_2, _IndexTemp_T_5) @[Voice.scala 88:63]
    node _IndexTemp_T_7 = tail(_IndexTemp_T_6, 1) @[Voice.scala 88:63]
    node _IndexTemp_T_8 = asSInt(_IndexTemp_T_7) @[Voice.scala 88:63]
    node _IndexTemp_T_9 = bits(Mem.io.ReadReg, 2, 2) @[Voice.scala 88:132]
    node _IndexTemp_T_10 = bits(_IndexTemp_T_9, 0, 0) @[Voice.scala 88:136]
    node _IndexTemp_T_11 = mux(_IndexTemp_T_10, WaveReg[2], asSInt(UInt<1>("h0"))) @[Voice.scala 88:117]
    node _IndexTemp_T_12 = add(_IndexTemp_T_8, _IndexTemp_T_11) @[Voice.scala 88:112]
    node _IndexTemp_T_13 = tail(_IndexTemp_T_12, 1) @[Voice.scala 88:112]
    node _IndexTemp_T_14 = asSInt(_IndexTemp_T_13) @[Voice.scala 88:112]
    node _IndexTemp_T_15 = bits(Mem.io.ReadReg, 3, 3) @[Voice.scala 88:181]
    node _IndexTemp_T_16 = bits(_IndexTemp_T_15, 0, 0) @[Voice.scala 88:185]
    node _IndexTemp_T_17 = mux(_IndexTemp_T_16, WaveReg[3], asSInt(UInt<1>("h0"))) @[Voice.scala 88:166]
    node _IndexTemp_T_18 = add(_IndexTemp_T_14, _IndexTemp_T_17) @[Voice.scala 88:161]
    node _IndexTemp_T_19 = tail(_IndexTemp_T_18, 1) @[Voice.scala 88:161]
    node _IndexTemp_T_20 = asSInt(_IndexTemp_T_19) @[Voice.scala 88:161]
    node _IndexTemp_T_21 = bits(Mem.io.ReadReg, 4, 4) @[Voice.scala 88:230]
    node _IndexTemp_T_22 = bits(_IndexTemp_T_21, 0, 0) @[Voice.scala 88:234]
    node _IndexTemp_T_23 = mux(_IndexTemp_T_22, WaveReg[4], asSInt(UInt<1>("h0"))) @[Voice.scala 88:215]
    node _IndexTemp_T_24 = add(_IndexTemp_T_20, _IndexTemp_T_23) @[Voice.scala 88:210]
    node _IndexTemp_T_25 = tail(_IndexTemp_T_24, 1) @[Voice.scala 88:210]
    node _IndexTemp_T_26 = asSInt(_IndexTemp_T_25) @[Voice.scala 88:210]
    node _IndexTemp_T_27 = bits(Mem.io.ReadReg, 5, 5) @[Voice.scala 88:279]
    node _IndexTemp_T_28 = bits(_IndexTemp_T_27, 0, 0) @[Voice.scala 88:283]
    node _IndexTemp_T_29 = mux(_IndexTemp_T_28, WaveReg[5], asSInt(UInt<1>("h0"))) @[Voice.scala 88:264]
    node _IndexTemp_T_30 = add(_IndexTemp_T_26, _IndexTemp_T_29) @[Voice.scala 88:259]
    node _IndexTemp_T_31 = tail(_IndexTemp_T_30, 1) @[Voice.scala 88:259]
    node _IndexTemp_T_32 = asSInt(_IndexTemp_T_31) @[Voice.scala 88:259]
    IndexTemp <= _IndexTemp_T_32 @[Voice.scala 88:13]
    node _SineGenerator_io_Index_T = asUInt(IndexTemp) @[Voice.scala 90:39]
    node _SineGenerator_io_Index_T_1 = add(_SineGenerator_io_Index_T, IndexReg[OpCounter]) @[Voice.scala 90:46]
    node _SineGenerator_io_Index_T_2 = tail(_SineGenerator_io_Index_T_1, 1) @[Voice.scala 90:46]
    SineGenerator.io.Index <= _SineGenerator_io_Index_T_2 @[Voice.scala 90:26]
    SineGenerator.io.Amp <= io.Amp[OpCounter] @[Voice.scala 91:24]
    when SineGenerator.io.OutputValid : @[Voice.scala 95:37]
      node _T_8 = sub(Mem.io.WriteReg, UInt<1>("h1")) @[Voice.scala 96:29]
      node _T_9 = tail(_T_8, 1) @[Voice.scala 96:29]
      WaveReg[_T_9] <= SineGenerator.io.WaveOut @[Voice.scala 96:36]
      when Mem.io.IsOutput : @[Voice.scala 98:26]
        node _OutputTempReg_T = add(OutputTempReg, SineGenerator.io.WaveOut) @[Voice.scala 99:38]
        node _OutputTempReg_T_1 = tail(_OutputTempReg_T, 1) @[Voice.scala 99:38]
        node _OutputTempReg_T_2 = asSInt(_OutputTempReg_T_1) @[Voice.scala 99:38]
        OutputTempReg <= _OutputTempReg_T_2 @[Voice.scala 99:21]
        node _T_10 = eq(OpCounter, UInt<3>("h5")) @[Voice.scala 101:22]
        node _T_11 = eq(ScaleReg, UInt<1>("h1")) @[Voice.scala 101:42]
        node _T_12 = and(_T_10, _T_11) @[Voice.scala 101:30]
        when _T_12 : @[Voice.scala 101:50]
          OutputTempReg <= asSInt(UInt<1>("h0")) @[Voice.scala 102:23]
          node _OutputReg_T = add(OutputTempReg, SineGenerator.io.WaveOut) @[Voice.scala 103:36]
          node _OutputReg_T_1 = tail(_OutputReg_T, 1) @[Voice.scala 103:36]
          node _OutputReg_T_2 = asSInt(_OutputReg_T_1) @[Voice.scala 103:36]
          OutputReg <= _OutputReg_T_2 @[Voice.scala 103:19]
    io.WaveOut <= OutputReg @[Voice.scala 109:14]

  module Synth :
    input clock : Clock
    input reset : UInt<1>
    output io : { Out : UInt<20>}

    inst Voice0 of Voice @[Synth.scala 14:22]
    Voice0.clock <= clock
    Voice0.reset <= reset
    node _io_Out_T = asUInt(Voice0.io.WaveOut) @[Synth.scala 17:31]
    io.Out <= _io_Out_T @[Synth.scala 17:10]
    Voice0.io.Freq[0] <= UInt<1>("h1") @[Synth.scala 23:23]
    Voice0.io.Freq[1] <= UInt<2>("h2") @[Synth.scala 23:23]
    Voice0.io.Freq[2] <= UInt<2>("h3") @[Synth.scala 23:23]
    Voice0.io.Freq[3] <= UInt<3>("h4") @[Synth.scala 23:23]
    Voice0.io.Freq[4] <= UInt<3>("h5") @[Synth.scala 23:23]
    Voice0.io.Freq[5] <= UInt<3>("h6") @[Synth.scala 23:23]
    Voice0.io.Amp[0] <= UInt<20>("hfffff") @[Synth.scala 26:22]
    Voice0.io.Amp[1] <= UInt<20>("hfffff") @[Synth.scala 26:22]
    Voice0.io.Amp[2] <= UInt<20>("hfffff") @[Synth.scala 26:22]
    Voice0.io.Amp[3] <= UInt<20>("hfffff") @[Synth.scala 26:22]
    Voice0.io.Amp[4] <= UInt<20>("hfffff") @[Synth.scala 26:22]
    Voice0.io.Amp[5] <= UInt<20>("hfffff") @[Synth.scala 26:22]
    Voice0.io.Algorithm <= UInt<1>("h1") @[Synth.scala 29:23]

